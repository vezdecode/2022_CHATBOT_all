from consts import token
from random import choice
import json


# –î–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api import VkUpload

vk_session = vk_api.VkApi(token=token)
session_api = vk_session.get_api()
longpool = VkLongPoll(vk_session)
upload = VkUpload(vk_session)

data_per = json.load(open("persons.json"))  # json —Å –∏–Ω—Ñ–æ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
data_mem = json.load(open("memes.json"))  # json —Å –∏–Ω—Ñ–æ–π –ø–æ –º–µ–º–∞–º
attachments = list(data_mem["file_names"].keys())


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def get_but(type, text, color):
    return {
        "action": {
            "type": f"{type}",
            "payload": "",
            "label": f"{text}"
        },
        "color": f"{color}"
    }


# –†–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboards = {
    "stand": {"btn": [[get_but("text", "–ú–µ–ºüòÑ", "positive"), get_but("text", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà", "primary")],
                      [get_but("text", "–í–æ–ø—Ä–æ—Å—ã‚ùî", "secondary")]],
              "inline": False},
    "quess": {"btn": [[get_but("text", "–í–æ–ø—Ä–æ—Å—ã‚ùî", "primary")]],
              "inline": True},
    "memes": {"btn": [[get_but("text",  "üëç", "positive"), get_but("text", "üëé", "negative")],
                      [get_but("text", "–ù–µ —Ö–æ—á—É", "secondary")]],
              "inline": True},
    "stat": {"btn" : [[get_but("text", "–õ–∏—á–Ω–∞—è", "primary"), get_but("text", "–ì–ª–æ–±–∞–ª—å–Ω–∞—è", "primary")],
                       [get_but("text", "–¢–æ–ø 9", "primary")]],
             "inline": True},
    "top": {"btn": [[get_but("text", "–î–∞!", "positive"), get_but("text", "–ù–µ, –≤—Å—ë", "negative")]],
            "inline": True}
}

# –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
questions = {
    1: {"ques": "–ö–∞–∫ —Ç–µ–±–µ –í–µ–∑–¥–µ–∫–æ–¥?",
        "btn": [[get_but("text", "–ü—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä!üòá", "positive"), get_but("text", "–ù—É —Ç–∞–∫–æ–µ...üòë", "negative")],
                [get_but("text", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "secondary")]],
        "ans": "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å",
        "inline": False},
    2: {"ques": "–ê —Ç—ã –ø–æ–º–Ω–∏—à—å —á—Ç–æ —Ç–∞–∫–æ–µ –í–µ–∑–¥–µ–∫–æ–¥?",
        "btn": [[get_but("text", "–•–∞–∫–∞—Ç–æ–Ω!üë®‚Äçüíª", "positive"), get_but("text", "–ú–∞—Ä–∞—Ñ–æ–Ω!!üèÉ‚Äç‚ôÇÔ∏è", "secondary")],
                [get_but("text", "–ù—É, –∫–æ–Ω–∫—É—Ä—Å...üåö", "secondary")], [get_but("text", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "secondary")]],
        "ans": "–î–æ–ø—É—Å—Ç–∏–º —Ç—ã –Ω–µ –ø–æ–ø–∞–ª—Å—è –Ω–∞ —É–ª–æ–≤–∫—É... –î–∞–≤–∞–π –¥–∞–ª—å—à–µ",
        "inline": True},
    3: {"ques": "–°–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–¥–µ–ª–∞–ª–∞ —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞?",
        "btn": [[get_but("text", "7-8üî•", "primary"), get_but("text", "5-6üòé", "primary")],
                [get_but("text", "3-4‚úä", "primary"), get_but("text", "1-2üí™", "primary")],
                [get_but("text", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "secondary")]],
        "ans": "–í—ã –±–æ–ª—å—à–∏–µ –º–æ–ª–æ–¥—Ü—ã!",
        "inline": True},
    4: {"ques": "–ö–∞–∫–æ–µ –º–µ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω—è—Ç—å?",
        "btn": [[get_but("text", "1, –∞ –∫–∞–∫ –∏–Ω–∞—á–µ?!", "positive")],
                [get_but("text", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "secondary")]],
        "ans": "–•–æ—Ä–æ—à–∏–π –Ω–∞—Å—Ç—Ä–æ–π!",
        "inline": False},
    5: {"ques": "–ß—Ç–æ –∫—É–ø–∏—à—å —É –Ω–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ?",
        "btn": [[get_but("text", "–ù–æ–≤–æ–µ —Ö—É–¥–∏!üòç", "positive"), get_but("text", "–°–≤–∏—Ç—à–æ—Ç!ü§©", "positive")],
                [get_but("text", "–ò–≥—Ä—É—à–∫—É!üòá", "positive"), get_but("text", "–ö–æ–Ω—Ñ–µ—Ç!üç¨", "positive")],
                [get_but("text", "–ë–ª–æ–∫–Ω–æ—Ç—ã!üìò", "positive"), get_but("text", "–†–µ–≤—å—é —Ä–µ–∑—é–º–µ!üìÉ", "positive")],
                [get_but("text", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "secondary")]],
        "ans": "–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–¥–µ—é—Å—å —É —Ç–µ–±—è –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –±–∞–ª–ª–æ–≤, —á—Ç–æ–±—ã —Ç—ã –∫—É–ø–∏–ª –≤—Å—ë!!",
        "inline": True},
    6: {"ques": "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –Ω–∞—à–∏—Ö –∏–≥—Ä–∞—Ö?",
        "btn": [[get_but("text", "–î–∞, –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!", "positive"), get_but("text", "–ù–µ –∑–∞—à–ª–æ...", "negative")],
                [get_but("text", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "secondary")]],
        "ans": "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–µ–ª–∞—Ç—å –∏—Ö –µ—â—ë –∫—Ä—É—á–µ!",
        "inline": False},
    7: {"ques": "–ì–¥–µ –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª?",
        "btn": [[get_but("text", "–ú–æ—Å–∫–≤–∞", "primary"), get_but("text", "–ü–∏—Ç–µ—Ä", "primary")],
                [get_but("text", "–ß–µ–ª—è–±–∏–Ω—Å–∫üòé", "secondary")],
                [get_but("text", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "secondary")]],
        "ans": "–ö—Ä—É—Ç–æ, —É—á—Ç—É! –õ–µ—Ç—Å–≥–æ—É –¥–∞–ª—å—à–µ",
        "inline": True},
    8: {"ques": "–õ—é–±–∏—à—å –±–æ—Ç–æ–≤?)",
        "btn": [[get_but("text", "–û–±–æ–∂–∞—é‚ù§Ô∏è", "positive"), get_but("text", "–ö–æ–Ω–µ—á–Ω–æüíû", "positive")],
                [get_but("text", "–≠—Ç–æ –∫—Ç–æ?üò¢", "negative")],
                [get_but("text", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", "secondary")]],
        "ans": "üíìüíìüíì",
        "inline": False},
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ json —Ñ–∞–π–ª–∞
def update_json(data, file):
    with open(file, "w") as outfile:
        json.dump(data, outfile)


# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º json –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def add_new_user(id):
    id = str(id)
    data_per["id"][id] = {"status": "wait", "n_que": 0,"top": 1, "memes": [], "likes": 0, "dislikes": 0}
    update_json(data_per, "persons.json")


def set_val(id, key, val):
    id = str(id)
    if key == "memes":
        if val == []:
            data_per["id"][id][key] = val
        else:
            data_per["id"][id][key].append(val)
    elif key in ["likes", "dislikes"]:
        data_per["id"][id][key] += 1
    else:
        data_per["id"][id][key] = val
    update_json(data_per, "persons.json")


def return_val(id, key):
    id = str(id)
    return data_per["id"][id][key]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–µ–º–∞
def rate_meme(id, file, type):
    data_mem["file_names"][file][type] += 1
    update_json(data_mem, "memes.json")


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_msg(id, text, btns, inline):
    kb = {
        "one_time": False,
        "buttons": btns,
        "inline": inline
    }
    kb = json.dumps(kb, ensure_ascii=False).encode("utf-8")
    kb = str(kb.decode("utf-8"))
    vk_session.method("messages.send", {"user_id": id, "message": text, "random_id": 0, "keyboard": kb})


# –û—Ç—Ä–∞–≤–∫–∞ –º–µ–º–∞
def send_meme(id):
    memes = return_val(id, "memes")
    if len(memes) == len(attachments):
        send_msg(int(id), "–¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –º–µ–º—ã!üò≥ \n "
                          "–¢–∞–∫ —á—Ç–æ —è –æ–±–Ω–æ–≤–ª—é —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫, —Å–º–æ—Ç—Ä–∏ —Å–Ω–æ–≤–∞. \n –õ–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏ —Ç–≤–æ—é –∑–∞–ø–æ–º–Ω—é, "
                          "—Ç–∞–∫ —á—Ç–æ –ø–æ–±–µ–π —Ä–µ–∫–æ—Ä–¥ –∏ –∑–∞–ª–∞–π–∫–∞–π –±–æ–ª—å—à–µ –≤—Å–µ—Ö!", \
                 keyboards["stand"]["btn"], keyboards["stand"]["inline"])
        set_val(id, "memes", [])
    else:
        cc = choice(attachments)
        while True:
            if cc in memes:
                cc = choice(attachments)
            else:
                break


        vk_session.method("messages.send", {"user_id": id, "random_id": 0, "message": "–õ–æ–≤–∏!", "attachment": cc})
        send_msg(id, "–û—Ü–µ–Ω–∏ –º–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!", keyboards["memes"]["btn"], keyboards["memes"]["inline"])
        data_mem["file_names"][cc]["views"] += 1
        update_json(data_mem, "memes.json")
        set_val(id, "memes", cc)
        set_val(id, "status", "mem")



print("bot is active")
# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
for event in longpool.listen():
    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
        msg = event.text.lower()
        id = event.user_id
        if str(id) not in data_per["id"]:
            add_new_user(id)
        status = return_val(id, "status")
        # –ë—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ json
        # –ü–æ –Ω–∏–º –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –±–æ—Ç—É –æ—Ç–≤–µ—Ç–∏—Ç—å
        if "–ø—Ä–∏–≤–µ—Ç" in msg or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" in msg:
            send_msg(id, "–ü—Ä–∏–≤–µ—Ç, –í–µ–∑–¥–µ–∫–æ–¥–µ—Ä–∞–º! \n –ï—Å—Ç—å –ø–∞—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ–±—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏–ª–∏ "
                         "–Ω–∞–ø–∏—à–∏ \"–í–æ–ø—Ä–æ—Å—ã\"", keyboards["quess"]["btn"], keyboards["quess"]["inline"])
            send_msg(id, "–ê —Ç–∞–∫ —É –º–µ–Ω—è –µ—â—ë –º–µ–º—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∏–º –µ—Å—Ç—å)", keyboards["stand"]["btn"],
                     keyboards["stand"]["inline"])
        elif "–ø–æ–∫–∞" in msg or "–¥–æ —Å–≤–∏–¥–∞–Ω–∏–µ" in msg:
            send_msg(id, "–ü–æ–∫–∞, –í–µ–∑–¥–µ–∫–æ–¥–µ—Ä–∞–º!", keyboards["stand"]["btn"], keyboards["stand"]["inline"])
        elif msg == "–≤–æ–ø—Ä–æ—Å—ã‚ùî" or msg == "–≤–æ–ø—Ä–æ—Å—ã":
            set_val(id, "status", "ques")
            set_val(id, "n_que", 1)
            n_que = return_val(id, "n_que")
            send_msg(id, "–í–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ 8, –æ–Ω–∏ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ!", [], False)
            send_msg(id, questions[n_que]["ques"], questions[n_que]["btn"], questions[n_que]["inline"])
        elif status == "ques" and msg == "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è":
            send_msg(id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–æ—Ç–≤–µ—á–∞–ª!", keyboards["stand"]["btn"], keyboards["stand"]["inline"])
            set_val(id, "n_que", 0)
            set_val(id, "status", "wait")
        elif status == "ques":
            n_que = return_val(id, "n_que")
            send_msg(id, questions[n_que]["ans"], [], False)
            set_val(id, "n_que", n_que + 1)
            n_que = return_val(id, "n_que")
            if n_que > 8:
                send_msg(id, "–°–ø–∞—Å–∏–±–æ, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!", keyboards["stand"]["btn"],
                         keyboards["stand"]["inline"])
                set_val(id, "n_que", 0)
                set_val(id, "status", "wait")
            else:
                send_msg(id, questions[n_que]["ques"], questions[n_que]["btn"], questions[n_que]["inline"])
        elif status != "mem" and ("–º–µ–º" in msg or msg == "–ú–µ–ºüòÑ"):
            send_meme(id)
        elif status == "mem" and msg in ["üëç", "üëé"]:
            last_meme = return_val(id, "memes")[-1]
            if msg == "üëç":
                rate_meme(id, last_meme, "likes")
                set_val(id, "likes", last_meme)
            else:
                rate_meme(id, last_meme, "dislikes")
                set_val(id, "dislikes", last_meme)
            send_msg(id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—é –æ—Ü–µ–Ω–∫—É! –ù–∞–ø–∏—à–∏ \"–ú–µ–º\" –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â—ë –º–µ–º", keyboards["stand"]["btn"], keyboards["stand"]["inline"])
            set_val(id, "status", "wait")
        elif status == "mem" and msg == "–Ω–µ —Ö–æ—á—É":
            send_msg(id, "–ù—É –ª–∞–¥–Ω–æ, –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", keyboards["stand"]["btn"], keyboards["stand"]["inline"])
            set_val(id, "status", "wait")
        elif status == "mem":
            send_msg(id, "–û—Ü–µ–Ω–∏ –º–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!", keyboards["memes"]["btn"], keyboards["memes"]["inline"])
        elif msg == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà" or "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in msg:
            send_msg(id, "–ö–∞–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–æ—á–µ—à—å?", keyboards["stat"]["btn"], keyboards["stat"]["inline"])
            set_val(id, "status", "stat")
        elif status == "stat":
            if msg == "–ª–∏—á–Ω–∞—è":
                likes = return_val(id, "likes")
                dislikes = return_val(id, "dislikes")
                send_msg(id, f"–¢–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤‚ù§Ô∏è: {likes} \n –¢–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤üòû: {dislikes}",
                         keyboards["stand"]["btn"], keyboards["stand"]["inline"])
                set_val(id, "status", "wait")
            elif msg == "–≥–ª–æ–±–∞–ª—å–Ω–∞—è":
                views = sum([data_mem["file_names"][k]["views"] for k in data_mem["file_names"].keys()])
                likes = sum([data_mem["file_names"][k]["likes"] for k in data_mem["file_names"].keys()])
                dislikes = sum([data_mem["file_names"][k]["dislikes"] for k in data_mem["file_names"].keys()])
                send_msg(id, f"–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤üëÄ: {views}\n"
                             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ª–∞–π–∫–æ–≤‚ù§Ô∏è: {likes}\n"
                             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –¥–∏–∑–ª–∞–π–∫–æ–≤üòû: {dislikes}",
                         keyboards["stand"]["btn"], keyboards["stand"]["inline"])
                set_val(id, "status", "wait")
            elif msg == "—Ç–æ–ø 9":
                data_mem_items = list(data_mem["file_names"].items())
                data_mem_items.sort(key = lambda x: x[1]["likes"], reverse=True)
                top = [i[0] for i in data_mem_items[:9]]
                top_v = return_val(id, "top")
                send_msg(id, "–¢–æ–ø 9 —Å–∞–º—ã—Ö —Å–º–µ—à–Ω—ã—Ö –º–µ–º–æ–≤üòÇ", keyboards["stand"]["btn"], keyboards["stand"]["inline"])
                vk_session.method("messages.send", {"user_id": id, "random_id": 0, "message": f"{top_v} –º–µ—Å—Ç–æ", "attachment": top[top_v-1]})
                send_msg(id, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?", keyboards["top"]["btn"], keyboards["top"]["inline"])
                set_val(id, "status", "top")
            else:
                send_msg(id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª...", keyboards["stand"]["btn"], keyboards["stand"]["inline"])
                set_val(id, "status", "wait")
        elif status == "top" and (msg == "–Ω–µ, –≤—Å—ë" or "–Ω–µ" in msg):
            send_msg(id, "–í–æ—Ç —Ç–∞–∫–æ–π –≤–æ—Ç —Ç–æ–ø!", keyboards["stand"]["btn"], keyboards["stand"]["inline"])
            set_val(id, "status", "wait")
            set_val(id, "top", 1)
        elif status == "top":
            data_mem_items = list(data_mem["file_names"].items())
            data_mem_items.sort(key = lambda x: x[1]["likes"], reverse=True)
            top = [i[0] for i in data_mem_items[:9]]
            top_v = return_val(id, "top")
            top_v += 1
            vk_session.method("messages.send", {"user_id": id, "random_id": 0, "message": f"{top_v} –º–µ—Å—Ç–æ", "attachment": top[top_v-1]})
            send_msg(id, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?", keyboards["top"]["btn"], keyboards["top"]["inline"])
            set_val(id, "top", top_v)
        else:
            send_msg(id, "–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–Ω–∏–∑—É!", keyboards["stand"]["btn"], keyboards["stand"]["inline"])
